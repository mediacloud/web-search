"""
Django settings for web-search project.

Generated by 'django-admin startproject' using Django 4.1.dev20220516154624.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""

import logging
from pathlib import Path
import os
import dj_database_url
import environ
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from django.core.exceptions import ImproperlyConfigured

logger = logging.getLogger(__file__)

# The static version of the app
VERSION = "2.0.5"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent

# new config should make this obsolete!
_DEFAULT_ALLOWED_HOSTS = [
    #### production:
    # app.process (mcweb.web) was for rss-fetcher on tarbell
    # now uses https://search.mediacloud.org should now work
    # (need to adjust rss-fetcher config first)
    'search.mediacloud.org', 'mcweb.web',

    #### staging:
    'mcweb-staging.tarbell.mediacloud.org', 'mcweb-staging.steinam.angwin',

    #### development (outside dokku)
    'localhost', '127.0.0.1'
]

# new config should make this obsolete!
_DEFAULT_CSRF_TRUSTED_ORIGINS = [
    'https://mcweb-staging.tarbell.mediacloud.org',
    'https://search.mediacloud.org'
]

env = environ.Env( # set casting, defaults
    # in alphabetical order:
    ALLOWED_HOSTS=(list, _DEFAULT_ALLOWED_HOSTS),
    ANALYTICS_MATOMO_DOMAIN=(str, "null"),
    ANALYTICS_MATOMO_SITE_ID=(str, "null"),
    CSRF_TRUSTED_ORIGINS=(list, _DEFAULT_CSRF_TRUSTED_ORIGINS),
    DEBUG=(bool, False),
    GIT_REV=(str, ""),
    NEWS_SEARCH_API=(str, "http://ramos.angwin:8000/v1/"),
    SENTRY_DSN=(str, ""),
    SENTRY_ENV=(str, ""),
    SENTRY_JS_REPLAY_RATE=(float, 0.1),
    SENTRY_JS_TRACES_RATE=(float, 0.2),
    SENTRY_PY_PROFILES_RATE=(float, 1.0),
    SENTRY_PY_TRACES_RATE=(float, 1.0),
    SYSTEM_ALERT=(str,""),
)
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# type/cast and default values declared above in environ.Env creation
ALLOWED_HOSTS = env("ALLOWED_HOSTS") # defined as list
ANALYTICS_MATOMO_DOMAIN = env('ANALYTICS_MATOMO_DOMAIN') or "null"
ANALYTICS_MATOMO_SITE_ID = env('ANALYTICS_MATOMO_SITE_ID') or "null"

CSRF_TRUSTED_ORIGINS = env("CSRF_TRUSTED_ORIGINS") # defined as list
DEBUG = env("DEBUG")

GIT_REV = env("GIT_REV")      # supplied by Dokku, used by API version

SECRET_KEY = env("SECRET_KEY")

# Application definition

INSTALLED_APPS = [
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "frontend",
    "backend.sources",
    "backend.search",
    "backend.users",
    "background_task",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]

ROOT_URLCONF = "urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wsgi.application"


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.parse(env('DATABASE_URL'), conn_max_age=0)
}

# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 10,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        "NAME": "backend.users.validators.MinimumAmountOfNumbers",
    },
     {
        "NAME": "backend.users.validators.MinimumAmountOfSpecialCharacters",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = "mcweb/static"

# Default primary key field type
# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],

    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],

    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100
}
# disable nice API browsing in production
if DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ]


APPEND_SLASH = False

MAX_ATTEMPTS = 1

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        # REDIS_URL supplied by Dokku:
        'LOCATION': env('REDIS_URL'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        },
        "KEY_PREFIX": "cache"
    }
}

DISABLE_SERVER_SIDE_CURSORS = True

NEWS_SEARCH_API_URL = env('NEWS_SEARCH_API_URL')

# email authentication
try:
    EMAIL_BACKEND = env('EMAIL_BACKEND')
    EMAIL_HOST = env('EMAIL_HOST')
    EMAIL_PORT = env('EMAIL_PORT')
    EMAIL_USE_SSL = env('EMAIL_USE_SSL')
    EMAIL_HOST_USER = env('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
except ImproperlyConfigured:
    # don't require email settings; for instance on localhost
    logger.warning("Email not configured")
    EMAIL_BACKEND = None
    EMAIL_HOST = None
    EMAIL_PORT = None
    EMAIL_USE_SSL = None
    EMAIL_HOST_USER = None
    EMAIL_HOST_PASSWORD = None

SENTRY_DSN = env('SENTRY_DSN')
SENTRY_ENV = env('SENTRY_ENV')
SENTRY_JS_TRACES_RATE = env('SENTRY_JS_TRACES_RATE') or "null"
SENTRY_JS_REPLAY_RATE = env('SENTRY_JS_REPLAY_RATE') or "null"
SENTRY_PY_PROFILES_RATE = env('SENTRY_PY_PROFILES_RATE')
SENTRY_PY_TRACES_RATE = env('SENTRY_PY_TRACES_RATE')

SYSTEM_ALERT = env('SYSTEM_ALERT') or None

# sentry config for Python code:
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(),
        ],
        environment=SENTRY_ENV,
        traces_sample_rate=SENTRY_PY_TRACES_RATE,
        profiles_sample_rate=SENTRY_PY_PROFILES_RATE,
        release=VERSION,

        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True
    )
else:
    logger.debug("Sentry not configured")
